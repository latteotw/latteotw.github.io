<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>832. Flipping an Image</title>
      <link href="/2020/02/07/832-Flipping-an-Image/"/>
      <url>/2020/02/07/832-Flipping-an-Image/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/flipping-an-image/" target="_blank" rel="noopener">https://leetcode.com/problems/flipping-an-image/</a></p><h1 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h1><blockquote><p>Given a binary matrix A, we want to flip the image horizontally, then invert it, and return the resulting image.</p><p>To flip an image horizontally means that each row of the image is reversed.  For example, flipping [1, 1, 0] &gt;horizontally results in [0, 1, 1].</p><p>To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0, 1, 1] &gt;results in [1, 0, 0].</p></blockquote><blockquote><p><strong>Example 1:</strong></p><p>Input: [[1,1,0], [1,0,1], [0,0,0]]</p><p>Output: [[1,0,0], [0,1,0], [1,1,1]]</p><p>Explanation: First reverse each row: [[0,1,1], [1,0,1], [0,0,0]].</p><p>Then, invert the image: [[1,0,0], [0,1,0], [1,1,1]]</p></blockquote><blockquote><p><strong>Example 2:</strong></p><p>Input: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]</p><p>Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p><p>Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].</p><p>Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p></blockquote><h1 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h1><p>The input is a matrix which means that we are dealing with a 2-D array. 2-D array in python can be implemented as 2-D list. 2-D list is a list of list. The inner list represents the elements in each row and the outer list represents all the rows. We are asked to do two things, one is to flip the matrix and also invert the value. We can quickly think this as a minimum <code>O(M*N)</code> time complexity algorithm, where M and N represents the dimension of the matrix, because we have to go through each elements in the list. Space complexity is unknown until we know how can we flip the matrix.</p><h1 id="Thinking-Process"><a href="#Thinking-Process" class="headerlink" title="Thinking Process"></a>Thinking Process</h1><p>The steps are very obvious: flip and then invert. Let’s think about it one by one.</p><p>How should we flip a list in python? There are couple ways to do it:</p><ol><li><p>Use built-in function reversed()</p></li><li><p>Use List class method reverse()</p></li><li><p>Use List slicing [::-1]</p></li></ol><p>We will talk about the differences between them in the takeaways section. We will just choose one to use.</p><p>After knowing how should we flip a single list, we should think about how should we flip the whole matrix. The answer is very obvious. Row by row.</p><p>We also have to invert each <code>0</code> to <code>1</code> and <code>1</code> to <code>0</code>. This can be done by using <code>1 - value</code>.</p><p>Now it’s clear to us the we should iterate through each row of the matrix and flip them. At the same time, we should invert the values. Let’s see what’s the most intuitive solution:</p><h1 id="First-Solution"><a href="#First-Solution" class="headerlink" title="First Solution"></a>First Solution</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flipAndInvertImage</span><span class="params">(self, A: List[List[int]])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> A: <span class="comment"># Iterate through each row in A</span></span><br><span class="line">            row.reverse() <span class="comment"># We flip each row</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(row)):</span><br><span class="line">                row[i] = <span class="number">1</span> - row[i] <span class="comment"># Invert the value</span></span><br><span class="line">        <span class="keyword">return</span> A</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a>Improvements</h1><p>The time complexity of this algorithm is what we desired: <code>O(M * N)</code>. I couldn’t think of faster ways to implement this algorithm. In regard of the space complexity, let’s see what’s the current one’s. We used <code>row.reverse()</code> function to implement the flipping. What’s the space complexity of this operation? It’s <code>O(N)</code>. We will talk about the details in later section. This yields <code>O(M * N)</code> space complexity. Actually, for all the methods that reverse the list, they are at least <code>O(N)</code> space complexity so there’s no room to improve the space complexity either. The next way to improve this algorithm is to think about the syntax simplicity. There’s a pythonic answer:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flipAndInvertImage</span><span class="params">(self, A: List[List[int]])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">return</span> [[<span class="number">1</span> - i <span class="keyword">for</span> i <span class="keyword">in</span> row[::<span class="number">-1</span>]] <span class="keyword">for</span> row <span class="keyword">in</span> A]</span><br></pre></td></tr></table></figure><h1 id="Answer-Analysis"><a href="#Answer-Analysis" class="headerlink" title="Answer Analysis"></a>Answer Analysis</h1><p>The improved algorithm doesn’t help with improving the time and space complexities.</p><blockquote><p>Time complexity: <code>O(M * N)</code> where M x N is the dimension of the input matrix.</p><p>Space complexity: <code>O(M * N)</code> where M x N is the dimension of the input matrix.</p></blockquote><h1 id="Takeaways"><a href="#Takeaways" class="headerlink" title="Takeaways"></a>Takeaways</h1><ol><li><p>Reverse a list</p><p> As we have talked earlier, there are couple of different ways to reverse a list. We will talk about them one by one.</p><ul><li><p>Using built-in reversed() function</p><p>Python3 has reversed() as a built-in function which takes a <code>seq</code> as input. According to <a href="https://docs.python.org/3/library/functions.html#reversed" target="_blank" rel="noopener">Python’s official documentation</a>:</p><blockquote><p>seq must be an object which has a <strong>reversed</strong>() method or supports the sequence protocol (the <strong>len</strong>() method and the <strong>getitem</strong>() method with integer arguments starting at 0).</p></blockquote><p>One thing to notice is that reversed() return an iterator. To make the iterator a list, you have co explicitly cast it. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; b &#x3D; reversed(a)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;list_reverseiterator object at 0x1090762e8&gt;</span><br><span class="line">&gt;&gt;&gt; list(b)</span><br><span class="line">[3, 2, 1]</span><br></pre></td></tr></table></figure><p>It has O(N) time and space complexity.</p></li><li><p>Using List class method reverse()<br>List class contains a class method called <code>reverse()</code> which modifies the object <strong>in-place</strong> to reverse it. Even though the list is modified in-place, it still requires O(N) time complexity because it requires additional extra memory during the reverse.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; a.reverse()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[3, 2, 1]</span><br></pre></td></tr></table></figure><p>It has O(N) time and space complexity.</p></li><li><p>Using list slice<br>List can also be reversed using slicing syntax such as a[::-1]. This doesn’t modify the original list so you have to assign it to another variable. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; b &#x3D; a[::-1]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[3, 2, 1]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3]</span><br></pre></td></tr></table></figure><p>It has O(N) time and space complexity. </p></li></ul></li><li><p>List comprehension</p><p> I used list comprehension in the improved algorithm. List comprehension is a really useful and clean syntax to construct a list. For more details, please refer to this <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" target="_blank" rel="noopener">official python documentation</a>.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Easy </tag>
            
            <tag> Python-List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python built-in functions</title>
      <link href="/2020/02/06/Python-built-in-functions/"/>
      <url>/2020/02/06/Python-built-in-functions/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>Range</strong></p><p>From <a href="https://docs.python.org/3/library/functions.html#func-range" target="_blank" rel="noopener">Python official document</a>:</p><blockquote><p>class range(stop)</p><p>class range(start, stop[, step])</p><p>Rather than being a function, range is actually an immutable sequence type, as documented in Ranges and Sequence Types &gt;— list, tuple, range.</p></blockquote><p>Range is a little bit different than all other built-in functions. It’s essential a data type that’s built-in in Python. More specifically, it shares the same feature of list and tuple - it’s sequential. Let’s introduce some features and usage of range.</p><ul><li><p>Start is inclusive and stop is exclusive</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>This will print:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>You can ignore step parameter. When step is ignored, it defaults to <code>1</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>This will print the same as above</p></li><li><p>You can ignore both start and step. When start is ignored, it defaults to <code>0</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>This will print:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>There are more advanced usage of range is discussed at <a href="https://pynative.com/python-range-function/" target="_blank" rel="noopener">this post</a>.</p></li></ul></li><li><p><strong>reversed()</strong></p><p>Python3 has reversed() as a built-in function which takes a <code>seq</code> as input. According to <a href="https://docs.python.org/3/library/functions.html#reversed" target="_blank" rel="noopener">Python’s official documentation</a></p><blockquote><p>seq must be an object which has a <strong>reversed</strong>() method or supports the sequence protocol (the <strong>len</strong>() method and the <strong>getitem</strong>() method with integer arguments starting at 0).</p></blockquote><p>One thing to notice is that reversed() return an iterator. To make the iterator a list, you have co explicitly cast it. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; b &#x3D; reversed(a)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;list_reverseiterator object at 0x1090762e8&gt;</span><br><span class="line">&gt;&gt;&gt; list(b)</span><br><span class="line">[3, 2, 1]</span><br></pre></td></tr></table></figure><p>It has O(N) time and space complexity.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-Built-In-Functions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1299. Replace Elements with Greatest Element on Right Side </title>
      <link href="/2020/02/05/1299-Replace-Elements-with-Greatest-Element-on-Right-Side/"/>
      <url>/2020/02/05/1299-Replace-Elements-with-Greatest-Element-on-Right-Side/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/" target="_blank" rel="noopener">https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/</a></p><h1 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h1><blockquote><p>Given an array <code>arr</code>, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1. After doing so, return the array.</p></blockquote><blockquote><p><strong>Example 1:</strong></p><p>Input: arr = [17,18,5,4,6,1]</p><p>Output: [18,6,6,6,1,-1]</p></blockquote><h1 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h1><p>Our input for this problem is an array and we are required to replace <strong>every</strong> element in the array with another number. This means that we have to iterate through the array for at least once. This yields at least O(N) time complexity. We also noticed that the last element is always -1. What we have to return is the modified array or a new array. This means that if we can modify the array in-place, we could reach a O(1) space complexity.</p><h1 id="Thinking-Process"><a href="#Thinking-Process" class="headerlink" title="Thinking Process"></a>Thinking Process</h1><p>The very intuitive solution is to start from the first element in the array and move to the right one by one. At each element, we find the maximum number on the right. However, it’s easy to get the time complexity of this algorithm which will be O(N^2). This is way too slow.</p><p>The question to ask is why do we have to iterate through each element on the right of the current index? Because we have to find the current maximum on the right every time we move the index. Is there anyway for us to find the current maximum on the right without iterating through the sub-array to the right of the index? Yes, we can start from the last element of the array. Every time we move the index to the left by one, we have already known what’s the maximum from the right-most point to the current index. This easily yields the following O(N) answer:</p><h1 id="First-Solution"><a href="#First-Solution" class="headerlink" title="First Solution"></a>First Solution</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceElements</span><span class="params">(self, arr: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        cur_max = <span class="number">-1</span> <span class="comment"># We keep track of what's the current maximum number from the right-most point.</span></span><br><span class="line">        <span class="comment"># cur_max is initialized to -1 because the last element is -1.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            arr[i], cur_max = cur_max, max(cur_max, arr[i])</span><br><span class="line">        <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a>Improvements</h1><p>There’s not much improvements to talk about because I think we have already reached the best time complexity and the best space complexity.</p><h1 id="Answer-Analysis"><a href="#Answer-Analysis" class="headerlink" title="Answer Analysis"></a>Answer Analysis</h1><p>The improved algorithm doesn’t help with improving the time and space complexities.</p><blockquote><p>Time complexity: O(N)</p><p>Space complexity: O(1) since we modified the input array in-place.</p></blockquote><h1 id="Takeaways"><a href="#Takeaways" class="headerlink" title="Takeaways"></a>Takeaways</h1><ol><li><p>Swap operation</p><p> In most of other programming language, when you have to swap two elements, you have to do something like:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">temp = a</span><br><span class="line">a = b</span><br><span class="line">b = temp</span><br></pre></td></tr></table></figure><p> This means that we usually need to find a temporary place holder for one of the elements that need to be swapped.<br> Just think about the case when you have to swap the liquid in two glass bottles. How would you do it?</p><p> With python, there’s a syntax sugar where you can do something like:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><p> Every element of the left side of <code>=</code> are assigned with their corresponding value on the right side of <code>=</code></p></li><li><p>Usage of range()</p><p> range() is a built-in function of python. The formal Python3 documentation has two prototypes for the built-in range function:</p><blockquote><p>class range(stop)</p><p>class range(start, stop[, step])</p></blockquote><p> Without specifying the step, the default step size is 1.<br> Let’s see the following examples:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p> This will print:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>, <span class="number">1</span>, <span class="number">-2</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p> This will print</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p> There are couple things to notice:</p><ul><li><p>The range is <strong>left inclusive</strong> and <strong>right exclusive</strong>.</p></li><li><p>If you don’t specify the start, it will always start from 0</p></li><li><p>If you don’t specify the step, it will always default to 1</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Easy </tag>
            
            <tag> Python-List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python List</title>
      <link href="/2020/02/04/Python-List/"/>
      <url>/2020/02/04/Python-List/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>List Concatenation</strong></p><p>There are two ways two concatenate a list with another. One is to use <code>+</code> to concatenate a list. Another way is to use <code>extend()</code> function to concatenate</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use + to concatenation a list</span></span><br><span class="line">A = [<span class="string">'a'</span>, <span class="string">'p'</span>, <span class="string">'p'</span>, <span class="string">'l'</span>, <span class="string">'e'</span>]</span><br><span class="line">B = [<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'a'</span>]</span><br><span class="line">C = A + B</span><br><span class="line">print(C) <span class="comment"># ['a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use extend() function to concatenate</span></span><br><span class="line">A.extend(B)</span><br><span class="line">print(A) <span class="comment"># ['a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a']</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>We can easily note that <code>+</code> creates a new list C which is the result of <code>A + B</code></p><p>At the meanwhile, <code>extend</code> concatenate list B to original list of A. This means that no new list is created. It modifies list A in-place. This operation will usually save some space but we lost the track of A unless you <strong><em>copy</em></strong> the original elements of A into another list ahead of time. For how to copy a list, please see next section.</p></li><li><p><strong>List Copy</strong></p><p>To continue with the previous example, we can copy the list before we extend it so that we don’t lose the track of the original list if we want.</p><p>Before we go into the actual syntax, let’s see the following example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="string">'a'</span>, <span class="string">'p'</span>, <span class="string">'p'</span>, <span class="string">'l'</span>, <span class="string">'e'</span>]</span><br><span class="line">B = [<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'a'</span>]</span><br><span class="line">C = A</span><br><span class="line">D = A.copy()</span><br><span class="line">A.extend(B)</span><br></pre></td></tr></table></figure><p>In this case, what is the result of <code>print(C)</code>?</p><p>Also, What’s the result of <code>print(D)</code>?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(A)</span><br><span class="line">[&#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39;, &#39;b&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;]</span><br><span class="line">&gt;&gt;&gt; print(C)</span><br><span class="line">[&#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39;, &#39;b&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;]</span><br><span class="line">&gt;&gt;&gt; print(D)</span><br><span class="line">[&#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39;]</span><br></pre></td></tr></table></figure><p>Why?</p><p>Let’s see some more results first:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(A.__str__)</span><br><span class="line">&lt;method-wrapper &#39;__str__&#39; of list object at 0x103aa2588&gt;</span><br><span class="line">&gt;&gt;&gt; print(C.__str__)</span><br><span class="line">&lt;method-wrapper &#39;__str__&#39; of list object at 0x103aa2588&gt;</span><br><span class="line">&gt;&gt;&gt; print(D.__str__)</span><br><span class="line">&lt;method-wrapper &#39;__str__&#39; of list object at 0x103aa2688&gt;</span><br><span class="line">&gt;&gt;&gt; A &#x3D;&#x3D; D</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; A &#x3D;&#x3D; C</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>What does this mean? <code>print(A.__str__)</code> function prints out the object description of A. <code>0x103aa2588</code> is the object address in memory.</p><p>Here we can see that A and C has the same address in memory and D has a different address in memory. <code>A == C</code> equals <code>true</code> and <code>A == D</code> equals <code>false</code> also verify this statement.</p><p>In order to know why we got this behavior, we have to look at how C and D is initialized.</p><p>We had <code>C = A</code> and <code>D = A.copy()</code>. The difference then became obvious:</p><p>Statement like <code>C = A</code> did a shallow copy which copy the object of <code>A</code> to variable <code>C</code> so that <code>A</code> and <code>C</code> refer to the same address in memory.</p><p>At the same time, <code>D = A.copy()</code> actually creates a new array <code>D</code> and we copied the actual item in <code>A</code> to <code>D</code> instead of simply refers the object of <code>A</code> to <code>D</code>.</p><p>It more or less similar to the following process:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> A: D.append(item)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1304. Find N Unique Integers Sum up to Zero</title>
      <link href="/2020/02/03/1304-Find-N-Unique-Integers-Sum-up-to-Zero/"/>
      <url>/2020/02/03/1304-Find-N-Unique-Integers-Sum-up-to-Zero/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/" target="_blank" rel="noopener">https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/</a></p><h1 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h1><blockquote><p>Given an integer n, return <strong><em>any</em></strong> array containing n <strong><em>unique</em></strong> integers such that they add up to 0.</p></blockquote><h1 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h1><p>We firstly note that the input is an integer <strong>n</strong> and output is an <strong>array</strong>. Furthermore, we find that the output is not unique, which means that we have to construct an output that meet the requirement of the problem and there could be multiple or even infinite number of correct answers to this problem. This is rarely seen in a coding interview.</p><p>Another important thing that we notice from the question statement is that elements we use in the answer must be unique, which means we cannot reuse any of the element.</p><h1 id="Thinking-Process"><a href="#Thinking-Process" class="headerlink" title="Thinking Process"></a>Thinking Process</h1><p>Firstly we noticed that we need to construct an array that sums to 0. It’s really natural to think about the following way of constructing the array:</p><blockquote><p>[-n, -n-1, -n-2, …, -3, -2, -1, 0, 1, 2, 3, …, n-2, n-1, n]</p></blockquote><p>Since we need n elements in the array, which means we need n/2 elements on the positive side and n/2 on the negative side so that they can easily sum up to zero. The dealbreaker here is whether we need to include 0 in the array. On which circumstances do we need to include 0? When n is odd. Otherwise we don’t need 0. With this thinking process, it’s very easy to come up with the following naive solution:</p><h1 id="First-Solution"><a href="#First-Solution" class="headerlink" title="First Solution"></a>First Solution</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumZero</span><span class="params">(self, n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        answer = [] <span class="comment"># We construct an empty array to hold the result</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, (n//<span class="number">2</span>) + <span class="number">1</span>):</span><br><span class="line">            answer.extend([i, -i])</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>: answer.append(<span class="number">0</span>) <span class="comment"># We add 0 when n is odd</span></span><br><span class="line">        <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a>Improvements</h1><p>Let’s analyze the time complexity and space complexity of our first algorithm.</p><blockquote><p>Time complexity: O(N) because we need to iterate the loop for n/2 times.</p><p>Space complexity: O(N) because our answer array has exactly n elements.</p></blockquote><p>We won’t be able to simplify the space complexity for sure because we anyway need to return an array with size n. Also, I don’t think there are easy ways to improve the time complexity as well because how many elements need to be constructed is depend on the input integer n and we have already reached a linear algorithm. So my focus will be at improving the code itself.</p><p>What’s the ugly part in our code? I guess the first thing I want to get rid of is the if statement. How can we get rid of it? Let’s do some observations of the following constructions:</p><blockquote><p>n = 1, [0]<br>n = 2, [-1, 1]<br>n = 3, [-2, 0, 2]<br>n = 4, [-3, -1, 1, 3]<br>n = 5, [-4, -2, 0, 2, 4]</p></blockquote><p>What’s rule can we derive from it?</p><blockquote><p>The i-th element of the returning array = i * 2 - n + 1</p></blockquote><p>Now with the derived rule, we can get the following improved algorithms:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumZero</span><span class="params">(self, n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        answer = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            answer.append(i * <span class="number">2</span> - n + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p>To be more Pythonic:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumZero</span><span class="params">(self, n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">return</span> [i * <span class="number">2</span> - n + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br></pre></td></tr></table></figure><h1 id="Answer-Analysis"><a href="#Answer-Analysis" class="headerlink" title="Answer Analysis"></a>Answer Analysis</h1><p>The improved algorithm doesn’t help with improving the time and space complexities.</p><blockquote><p>Time complexity: O(N)</p><p>Space complexity: O(N)</p></blockquote><h1 id="Takeaways"><a href="#Takeaways" class="headerlink" title="Takeaways"></a>Takeaways</h1><p>The main take aways for this problem will be about python.</p><ol><li><p>Different ways to concatenate two lists</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 1: using +</span></span><br><span class="line">print(a + b) <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 2: using extend</span></span><br><span class="line">a.extend(b)</span><br><span class="line">print(a) <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p> The difference between using + and extend is that + will create a new list while extend modifies the first list in-place. Extend will save some space for most use cases.</p></li><li><p>Python list comprehension</p><p> Please refer to <a href="https://www.programiz.com/python-programming/list-comprehension" target="_blank" rel="noopener">this awesome post</a> for how to use python list comprehension</p></li><li><p>// and / for division operations</p><p> Depend on which version of python you use, // and / works differently</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="number">3</span> // <span class="number">2</span> <span class="comment"># = 1</span></span><br><span class="line"><span class="number">3</span> / <span class="number">2</span> <span class="comment"># = 1.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="number">3</span> // <span class="number">2</span> <span class="comment"># = 1</span></span><br><span class="line"><span class="number">3</span> / <span class="number">2</span> <span class="comment"># = 1</span></span><br><span class="line"><span class="number">3</span> / <span class="number">2.0</span> <span class="comment"># = 1.5</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Easy </tag>
            
            <tag> Python-List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use this blog</title>
      <link href="/2020/02/02/How-to-use-this-blog/"/>
      <url>/2020/02/02/How-to-use-this-blog/</url>
      
        <content type="html"><![CDATA[<p>Depend on what you are planning to do, there are different ways to use this blog.</p><h1 id="Follow-my-path-to-prepare-coding-interview"><a href="#Follow-my-path-to-prepare-coding-interview" class="headerlink" title="Follow my path to prepare coding interview"></a>Follow my path to prepare coding interview</h1><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>Read <a href="https://latteotw.github.io/2020/01/30/About-this-blog/">About this blog</a> to<br>understand my purpose of building this blog</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>Read <a href="https://latteotw.github.io/2020/02/02/Study-plan/">Study plan</a> to learn my plan<br>for preparing coding interviews.</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>Keep watching <a href="https://latteotw.github.io/2020/02/02/Knowledge-structure-graph/">Knowledge structure graph</a><br>as I will keep updating them as I proceed.</p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>Follow my new posts by tags or categories and practice on your own.</p><a id="more"></a><h1 id="Search-for-answers-of-problems"><a href="#Search-for-answers-of-problems" class="headerlink" title="Search for answers of problems"></a>Search for answers of problems</h1><p>Use the search box on top of the website to search the keyword or browse by category.</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
          <category> General </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Study plan</title>
      <link href="/2020/02/02/Study-plan/"/>
      <url>/2020/02/02/Study-plan/</url>
      
        <content type="html"><![CDATA[<p><strong><em>We will follow the following order when we practice with Leetcode</em></strong></p><ul><li>Arrays</li><li>Strings</li><li>Hash table</li><li>Stack</li><li>Queue</li><li>Linked list</li><li>Tree</li><li>Graph</li><li>Math</li><li>Bit manipulation</li><li>Recursion</li><li>Sort</li><li>Heap</li><li>Divide and conquer</li><li>Binary Search</li><li>BFS</li><li>DFS</li><li>Union find</li><li>Dynamic programming</li><li>Greedy</li><li>Backtracking</li></ul><a id="more"></a><p>As you can see, we will try to focus on data structures first and then algorithms<br>since I personally think that data structure are the fundamental for learning more<br>advanced algorithms as algorithms are implemented with basic data structures. However,<br>you will find a lot intersections between data structure and algorithms. For example,<br>in order to solve an array problem, you might have to use the knowledge of binary<br>search. Therefore, I will try to not include questions that rely on knowledge about<br>topics that we have not covered yet. However, I will keep a note on my end to make<br>sure that we re-visit those problems after we cover the topics. After we visit every<br>topic, all the dots will be connected.</p><p>There are some topics that I didn’t include in above list because they have less frequencies<br>though they are equally important as those problems with higher frequencies. For<br>example: Trie, Segment tree, Ordered map and etc. I will still cover these topics<br>at the time when I think I am ready.</p><p>I will create a folder(category) and also tag for each of the topics. You can either<br>browse by category, tag or simply search in the search box.</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
          <category> General </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Knowledge structure graph</title>
      <link href="/2020/02/02/Knowledge-structure-graph/"/>
      <url>/2020/02/02/Knowledge-structure-graph/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/koU6ICC.png" alt="alt text"></p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
          <category> General </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About this blog</title>
      <link href="/2020/01/30/About-this-blog/"/>
      <url>/2020/01/30/About-this-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h1><p>I started writing this blog as a memo for my coding interview preparation process.<br>At the mean while, I hope readers can find useful contents in this blog, either<br>you are preparing for coding interview the same as me, or just hoping to sharp your<br>data structures and algorithms.</p><a id="more"></a><h1 id="Approaches"><a href="#Approaches" class="headerlink" title="Approaches"></a>Approaches</h1><ul><li>I will use <a href="https://leetcode.com/" target="_blank" rel="noopener">Leetcode</a> as my main source of coding questions and answering templates.</li><li>I will try to complete selected questions by tags in Leetcode. For each question,<br>they will be approached in a various aspects:<ul><li>Problem set</li><li>Problem set analysis</li><li>Thinking process</li><li>Brutal force / First solution</li><li>Improvements</li><li>Answer analysis: time/space complexities</li><li>Take aways: conclusions, templates, programming related takeaways such as the<br>usage of a given data structure.</li></ul></li><li>I will draw a knowledge graph that can represent the structure of all the<br>problems and their underlying data structure and algorithms that we have processed<br>so that readers can get a general idea of the big picture of data structures and algorithms.<h1 id="Pre-requisites"><a href="#Pre-requisites" class="headerlink" title="Pre-requisites"></a>Pre-requisites</h1></li><li><strong>Basic knowledge of Python.</strong> We will use Python3 and I will also try to cover some<br>basic programming knowledge about Python</li><li><strong>Leetcode access.</strong> You can register it for free.</li><li><strong>Basic knowledge of data structures</strong> like array, strings, hashmap and etc. I won’t<br>assume any advanced knowledge of complicated data structure such as tree and graph.<br>Knowledge of algorithms are not required as learning them together is the main purpose<br>of this blog.</li></ul><h1 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h1><p>As I will try my best effort to make my post as accurate as possible, I would also<br>appreciate your feedback for any questions and improvements. You can use the discussion<br>section under each question to interact with me and other readers.</p><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><ul><li>When will I update the blog?<ul><li>I will try to update it on a daily basis but there will for sure be gaps.</li></ul></li><li>What’s your practicing order for Leetcode tags?<ul><li>I will post another follow up blog to talk about my plans for practicing with<br>Leetcode.</li></ul></li><li>Will system designs be discussed?<ul><li>Yes but it will come after the data structure and algorithms.</li></ul></li></ul></br><p>- latteotw</p><p>- Nobody said it was easy. No one ever said it would be this hard.</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
          <category> General </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
