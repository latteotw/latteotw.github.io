<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python List</title>
      <link href="/2020/02/04/Python-List/"/>
      <url>/2020/02/04/Python-List/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>List Concatenation</strong></p><p>There are two ways two concatenate a list with another. One is to use <code>+</code> to concatenate a list. Another way is to use <code>extend()</code> function to concatenate</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use + to concatenation a list</span></span><br><span class="line">A = [<span class="string">'a'</span>, <span class="string">'p'</span>, <span class="string">'p'</span>, <span class="string">'l'</span>, <span class="string">'e'</span>]</span><br><span class="line">B = [<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'a'</span>]</span><br><span class="line">C = A + B</span><br><span class="line">print(C) <span class="comment"># ['a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use extend() function to concatenate</span></span><br><span class="line">A.extend(B)</span><br><span class="line">print(A) <span class="comment"># ['a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a']</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>We can easily note that <code>+</code> creates a new list C which is the result of <code>A + B</code></p><p>At the meanwhile, <code>extend</code> concatenate list B to original list of A. This means that no new list is created. It modifies list A in-place. This operation will usually save some space but we lost the track of A unless you <strong><em>copy</em></strong> the original elements of A into another list ahead of time. For how to copy a list, please see next section.</p></li><li><p><strong>List Copy</strong></p><p>To continue with the previous example, we can copy the list before we extend it so that we don’t lose the track of the original list if we want.</p><p>Before we go into the actual syntax, let’s see the following example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="string">'a'</span>, <span class="string">'p'</span>, <span class="string">'p'</span>, <span class="string">'l'</span>, <span class="string">'e'</span>]</span><br><span class="line">B = [<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'a'</span>]</span><br><span class="line">C = A</span><br><span class="line">D = A.copy()</span><br><span class="line">A.extend(B)</span><br></pre></td></tr></table></figure><p>In this case, what is the result of <code>print(C)</code>?</p><p>Also, What’s the result of <code>print(D)</code>?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(A)</span><br><span class="line">[&#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39;, &#39;b&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;]</span><br><span class="line">&gt;&gt;&gt; print(C)</span><br><span class="line">[&#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39;, &#39;b&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;]</span><br><span class="line">&gt;&gt;&gt; print(D)</span><br><span class="line">[&#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39;]</span><br></pre></td></tr></table></figure><p>Why?</p><p>Let’s see some more results first:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(A.__str__)</span><br><span class="line">&lt;method-wrapper &#39;__str__&#39; of list object at 0x103aa2588&gt;</span><br><span class="line">&gt;&gt;&gt; print(C.__str__)</span><br><span class="line">&lt;method-wrapper &#39;__str__&#39; of list object at 0x103aa2588&gt;</span><br><span class="line">&gt;&gt;&gt; print(D.__str__)</span><br><span class="line">&lt;method-wrapper &#39;__str__&#39; of list object at 0x103aa2688&gt;</span><br><span class="line">&gt;&gt;&gt; A &#x3D;&#x3D; D</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; A &#x3D;&#x3D; C</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>What does this mean? <code>print(A.__str__)</code> function prints out the object description of A. <code>0x103aa2588</code> is the object address in memory.</p><p>Here we can see that A and C has the same address in memory and D has a different address in memory. <code>A == C</code> equals <code>true</code> and <code>A == D</code> equals <code>false</code> also verify this statement.</p><p>In order to know why we got this behavior, we have to look at how C and D is initialized.</p><p>We had <code>C = A</code> and <code>D = A.copy()</code>. The difference then became obvious:</p><p>Statement like <code>C = A</code> did a shallow copy which copy the object of <code>A</code> to variable <code>C</code> so that <code>A</code> and <code>C</code> refer to the same address in memory.</p><p>At the same time, <code>D = A.copy()</code> actually creates a new array <code>D</code> and we copied the actual item in <code>A</code> to <code>D</code> instead of simply refers the object of <code>A</code> to <code>D</code>.</p><p>It more or less similar to the following process:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> A: D.append(item)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> List </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1304. Find N Unique Integers Sum up to Zero</title>
      <link href="/2020/02/03/1304-Find-N-Unique-Integers-Sum-up-to-Zero/"/>
      <url>/2020/02/03/1304-Find-N-Unique-Integers-Sum-up-to-Zero/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/" target="_blank" rel="noopener">https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/</a></p><h1 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h1><blockquote><p>Given an integer n, return <strong><em>any</em></strong> array containing n <strong><em>unique</em></strong> integers such that they add up to 0.</p></blockquote><h1 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h1><p>We firstly note that the input is an integer <strong>n</strong> and output is an <strong>array</strong>. Furthermore, we find that the output is not unique, which means that we have to construct an output that meet the requirement of the problem and there could be multiple or even infinite number of correct answers to this problem. This is rarely seen in a coding interview.</p><p>Another important thing that we notice from the question statement is that elements we use in the answer must be unique, which means we cannot reuse any of the element.</p><h1 id="Thinking-Process"><a href="#Thinking-Process" class="headerlink" title="Thinking Process"></a>Thinking Process</h1><p>Firstly we noticed that we need to construct an array that sums to 0. It’s really natural to think about the following way of constructing the array:</p><blockquote><p>[-n, -n-1, -n-2, …, -3, -2, -1, 0, 1, 2, 3, …, n-2, n-1, n]</p></blockquote><p>Since we need n elements in the array, which means we need n/2 elements on the positive side and n/2 on the negative side so that they can easily sum up to zero. The dealbreaker here is whether we need to include 0 in the array. On which circumstances do we need to include 0? When n is odd. Otherwise we don’t need 0. With this thinking process, it’s very easy to come up with the following naive solution:</p><h1 id="First-Solution"><a href="#First-Solution" class="headerlink" title="First Solution"></a>First Solution</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumZero</span><span class="params">(self, n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        answer = [] <span class="comment"># We construct an empty array to hold the result</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, (n//<span class="number">2</span>) + <span class="number">1</span>):</span><br><span class="line">            answer.extend([i, -i])</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>: answer.append(<span class="number">0</span>) <span class="comment"># We add 0 when n is odd</span></span><br><span class="line">        <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a>Improvements</h1><p>Let’s analyze the time complexity and space complexity of our first algorithm.</p><blockquote><p>Time complexity: O(N) because we need to iterate the loop for n/2 times.</p><p>Space complexity: O(N) because our answer array has exactly n elements.</p></blockquote><p>We won’t be able to simplify the space complexity for sure because we anyway need to return an array with size n. Also, I don’t think there are easy ways to improve the time complexity as well because how many elements need to be constructed is depend on the input integer n and we have already reached a linear algorithm. So my focus will be at improving the code itself.</p><p>What’s the ugly part in our code? I guess the first thing I want to get rid of is the if statement. How can we get rid of it? Let’s do some observations of the following constructions:</p><blockquote><p>n = 1, [0]<br>n = 2, [-1, 1]<br>n = 3, [-2, 0, 2]<br>n = 4, [-3, -1, 1, 3]<br>n = 5, [-4, -2, 0, 2, 4]</p></blockquote><p>What’s rule can we derive from it?</p><blockquote><p>The i-th element of the returning array = i * 2 - n + 1</p></blockquote><p>Now with the derived rule, we can get the following improved algorithms:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumZero</span><span class="params">(self, n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        answer = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            answer.append(i * <span class="number">2</span> - n + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p>To be more Pythonic:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumZero</span><span class="params">(self, n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">return</span> [i * <span class="number">2</span> - n + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br></pre></td></tr></table></figure><h1 id="Answer-Analysis"><a href="#Answer-Analysis" class="headerlink" title="Answer Analysis"></a>Answer Analysis</h1><p>The improved algorithm doesn’t help with improving the time and space complexities.</p><blockquote><p>Time complexity: O(N)</p><p>Space complexity: O(N)</p></blockquote><h1 id="Takeaways"><a href="#Takeaways" class="headerlink" title="Takeaways"></a>Takeaways</h1><p>The main take aways for this problem will be about python.</p><ol><li><p>Different ways to concatenate two lists</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 1: using +</span></span><br><span class="line">print(a + b) <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 2: using extend</span></span><br><span class="line">a.extend(b)</span><br><span class="line">print(a) <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p> The difference between using + and extend is that + will create a new list while extend modifies the first list in-place. Extend will save some space for most use cases.</p></li><li><p>Python list comprehension</p><p> Please refer to <a href="https://www.programiz.com/python-programming/list-comprehension" target="_blank" rel="noopener">this awesome post</a> for how to use python list comprehension</p></li><li><p>// and / for division operations</p><p> Depend on which version of python you use, // and / works differently</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="number">3</span> // <span class="number">2</span> <span class="comment"># = 1</span></span><br><span class="line"><span class="number">3</span> / <span class="number">2</span> <span class="comment"># = 1.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="number">3</span> // <span class="number">2</span> <span class="comment"># = 1</span></span><br><span class="line"><span class="number">3</span> / <span class="number">2</span> <span class="comment"># = 1</span></span><br><span class="line"><span class="number">3</span> / <span class="number">2.0</span> <span class="comment"># = 1.5</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Easy </tag>
            
            <tag> Python-List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use this blog</title>
      <link href="/2020/02/02/How-to-use-this-blog/"/>
      <url>/2020/02/02/How-to-use-this-blog/</url>
      
        <content type="html"><![CDATA[<p>Depend on what you are planning to do, there are different ways to use this blog.</p><h1 id="Follow-my-path-to-prepare-coding-interview"><a href="#Follow-my-path-to-prepare-coding-interview" class="headerlink" title="Follow my path to prepare coding interview"></a>Follow my path to prepare coding interview</h1><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>Read <a href="https://latteotw.github.io/2020/01/30/About-this-blog/">About this blog</a> to<br>understand my purpose of building this blog</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>Read <a href="https://latteotw.github.io/2020/02/02/Study-plan/">Study plan</a> to learn my plan<br>for preparing coding interviews.</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>Keep watching <a href="https://latteotw.github.io/2020/02/02/Knowledge-structure-graph/">Knowledge structure graph</a><br>as I will keep updating them as I proceed.</p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>Follow my new posts by tags or categories and practice on your own.</p><a id="more"></a><h1 id="Search-for-answers-of-problems"><a href="#Search-for-answers-of-problems" class="headerlink" title="Search for answers of problems"></a>Search for answers of problems</h1><p>Use the search box on top of the website to search the keyword or browse by category.</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
          <category> General </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Study plan</title>
      <link href="/2020/02/02/Study-plan/"/>
      <url>/2020/02/02/Study-plan/</url>
      
        <content type="html"><![CDATA[<p><strong><em>We will follow the following order when we practice with Leetcode</em></strong></p><ul><li>Arrays</li><li>Strings</li><li>Hash table</li><li>Stack</li><li>Queue</li><li>Linked list</li><li>Tree</li><li>Graph</li><li>Math</li><li>Bit manipulation</li><li>Recursion</li><li>Sort</li><li>Heap</li><li>Divide and conquer</li><li>Binary Search</li><li>BFS</li><li>DFS</li><li>Union find</li><li>Dynamic programming</li><li>Greedy</li><li>Backtracking</li></ul><a id="more"></a><p>As you can see, we will try to focus on data structures first and then algorithms<br>since I personally think that data structure are the fundamental for learning more<br>advanced algorithms as algorithms are implemented with basic data structures. However,<br>you will find a lot intersections between data structure and algorithms. For example,<br>in order to solve an array problem, you might have to use the knowledge of binary<br>search. Therefore, I will try to not include questions that rely on knowledge about<br>topics that we have not covered yet. However, I will keep a note on my end to make<br>sure that we re-visit those problems after we cover the topics. After we visit every<br>topic, all the dots will be connected.</p><p>There are some topics that I didn’t include in above list because they have less frequencies<br>though they are equally important as those problems with higher frequencies. For<br>example: Trie, Segment tree, Ordered map and etc. I will still cover these topics<br>at the time when I think I am ready.</p><p>I will create a folder(category) and also tag for each of the topics. You can either<br>browse by category, tag or simply search in the search box.</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
          <category> General </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Knowledge structure graph</title>
      <link href="/2020/02/02/Knowledge-structure-graph/"/>
      <url>/2020/02/02/Knowledge-structure-graph/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/koU6ICC.png" alt="alt text"></p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
          <category> General </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About this blog</title>
      <link href="/2020/01/30/About-this-blog/"/>
      <url>/2020/01/30/About-this-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h1><p>I started writing this blog as a memo for my coding interview preparation process.<br>At the mean while, I hope readers can find useful contents in this blog, either<br>you are preparing for coding interview the same as me, or just hoping to sharp your<br>data structures and algorithms.</p><a id="more"></a><h1 id="Approaches"><a href="#Approaches" class="headerlink" title="Approaches"></a>Approaches</h1><ul><li>I will use <a href="https://leetcode.com/" target="_blank" rel="noopener">Leetcode</a> as my main source of coding questions and answering templates.</li><li>I will try to complete selected questions by tags in Leetcode. For each question,<br>they will be approached in a various aspects:<ul><li>Problem set</li><li>Problem set analysis</li><li>Thinking process</li><li>Brutal force / First solution</li><li>Improvements</li><li>Answer analysis: time/space complexities</li><li>Take aways: conclusions, templates, programming related takeaways such as the<br>usage of a given data structure.</li></ul></li><li>I will draw a knowledge graph that can represent the structure of all the<br>problems and their underlying data structure and algorithms that we have processed<br>so that readers can get a general idea of the big picture of data structures and algorithms.<h1 id="Pre-requisites"><a href="#Pre-requisites" class="headerlink" title="Pre-requisites"></a>Pre-requisites</h1></li><li><strong>Basic knowledge of Python.</strong> We will use Python3 and I will also try to cover some<br>basic programming knowledge about Python</li><li><strong>Leetcode access.</strong> You can register it for free.</li><li><strong>Basic knowledge of data structures</strong> like array, strings, hashmap and etc. I won’t<br>assume any advanced knowledge of complicated data structure such as tree and graph.<br>Knowledge of algorithms are not required as learning them together is the main purpose<br>of this blog.</li></ul><h1 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h1><p>As I will try my best effort to make my post as accurate as possible, I would also<br>appreciate your feedback for any questions and improvements. You can use the discussion<br>section under each question to interact with me and other readers.</p><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><ul><li>When will I update the blog?<ul><li>I will try to update it on a daily basis but there will for sure be gaps.</li></ul></li><li>What’s your practicing order for Leetcode tags?<ul><li>I will post another follow up blog to talk about my plans for practicing with<br>Leetcode.</li></ul></li><li>Will system designs be discussed?<ul><li>Yes but it will come after the data structure and algorithms.</li></ul></li></ul></br><p>- latteotw</p><p>- Nobody said it was easy. No one ever said it would be this hard.</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
          <category> General </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
