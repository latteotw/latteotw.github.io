{"meta":{"title":"LATTEOTW","subtitle":"","description":"","author":"latteotw","url":"https://latteotw.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-01-31T03:48:08.829Z","updated":"2020-01-31T03:48:08.829Z","comments":true,"path":"404.html","permalink":"https://latteotw.github.io/404.html","excerpt":"","text":"404 Not Found Sorry the page your are looking for is gone Please make sure you entered the right address"},{"title":"About","date":"2020-01-30T08:41:27.990Z","updated":"2020-01-30T08:41:27.990Z","comments":true,"path":"about/index.html","permalink":"https://latteotw.github.io/about/index.html","excerpt":"","text":"This is all about me"},{"title":"All categories","date":"2020-01-30T08:54:32.875Z","updated":"2020-01-30T08:54:32.875Z","comments":true,"path":"categories/index.html","permalink":"https://latteotw.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-01-30T08:43:15.335Z","updated":"2020-01-30T08:43:15.335Z","comments":true,"path":"tags/index.html","permalink":"https://latteotw.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"832. Flipping an Image","slug":"832-Flipping-an-Image","date":"2020-02-07T19:37:50.000Z","updated":"2020-02-07T23:47:40.320Z","comments":true,"path":"2020/02/07/832-Flipping-an-Image/","link":"","permalink":"https://latteotw.github.io/2020/02/07/832-Flipping-an-Image/","excerpt":"https://leetcode.com/problems/flipping-an-image/ Problem Statement Given a binary matrix A, we want to flip the image horizontally, then invert it, and return the resulting image. To flip an image horizontally means that each row of the image is reversed. For example, flipping [1, 1, 0] &gt;horizontally results in [0, 1, 1]. To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0, 1, 1] &gt;results in [1, 0, 0]. Example 1: Input: [[1,1,0], [1,0,1], [0,0,0]] Output: [[1,0,0], [0,1,0], [1,1,1]] Explanation: First reverse each row: [[0,1,1], [1,0,1], [0,0,0]]. Then, invert the image: [[1,0,0], [0,1,0], [1,1,1]] Example 2: Input: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]] Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]. Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] Problem AnalysisThe input is a matrix which means that we are dealing with a 2-D array. 2-D array in python can be implemented as 2-D list. 2-D list is a list of list. The inner list represents the elements in each row and the outer list represents all the rows. We are asked to do two things, one is to flip the matrix and also invert the value. We can quickly think this as a minimum O(M*N) time complexity algorithm, where M and N represents the dimension of the matrix, because we have to go through each elements in the list. Space complexity is unknown until we know how can we flip the matrix. Thinking ProcessThe steps are very obvious: flip and then invert. Let’s think about it one by one. How should we flip a list in python? There are couple ways to do it: Use built-in function reversed() Use List class method reverse() Use List slicing [::-1] We will talk about the differences between them in the takeaways section. We will just choose one to use. After knowing how should we flip a single list, we should think about how should we flip the whole matrix. The answer is very obvious. Row by row. We also have to invert each 0 to 1 and 1 to 0. This can be done by using 1 - value. Now it’s clear to us the we should iterate through each row of the matrix and flip them. At the same time, we should invert the values. Let’s see what’s the most intuitive solution: First Solution1234567class Solution: def flipAndInvertImage(self, A: List[List[int]]) -&gt; List[List[int]]: for row in A: # Iterate through each row in A row.reverse() # We flip each row for i in range(len(row)): row[i] = 1 - row[i] # Invert the value return A","text":"https://leetcode.com/problems/flipping-an-image/ Problem Statement Given a binary matrix A, we want to flip the image horizontally, then invert it, and return the resulting image. To flip an image horizontally means that each row of the image is reversed. For example, flipping [1, 1, 0] &gt;horizontally results in [0, 1, 1]. To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0, 1, 1] &gt;results in [1, 0, 0]. Example 1: Input: [[1,1,0], [1,0,1], [0,0,0]] Output: [[1,0,0], [0,1,0], [1,1,1]] Explanation: First reverse each row: [[0,1,1], [1,0,1], [0,0,0]]. Then, invert the image: [[1,0,0], [0,1,0], [1,1,1]] Example 2: Input: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]] Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]. Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] Problem AnalysisThe input is a matrix which means that we are dealing with a 2-D array. 2-D array in python can be implemented as 2-D list. 2-D list is a list of list. The inner list represents the elements in each row and the outer list represents all the rows. We are asked to do two things, one is to flip the matrix and also invert the value. We can quickly think this as a minimum O(M*N) time complexity algorithm, where M and N represents the dimension of the matrix, because we have to go through each elements in the list. Space complexity is unknown until we know how can we flip the matrix. Thinking ProcessThe steps are very obvious: flip and then invert. Let’s think about it one by one. How should we flip a list in python? There are couple ways to do it: Use built-in function reversed() Use List class method reverse() Use List slicing [::-1] We will talk about the differences between them in the takeaways section. We will just choose one to use. After knowing how should we flip a single list, we should think about how should we flip the whole matrix. The answer is very obvious. Row by row. We also have to invert each 0 to 1 and 1 to 0. This can be done by using 1 - value. Now it’s clear to us the we should iterate through each row of the matrix and flip them. At the same time, we should invert the values. Let’s see what’s the most intuitive solution: First Solution1234567class Solution: def flipAndInvertImage(self, A: List[List[int]]) -&gt; List[List[int]]: for row in A: # Iterate through each row in A row.reverse() # We flip each row for i in range(len(row)): row[i] = 1 - row[i] # Invert the value return A ImprovementsThe time complexity of this algorithm is what we desired: O(M * N). I couldn’t think of faster ways to implement this algorithm. In regard of the space complexity, let’s see what’s the current one’s. We used row.reverse() function to implement the flipping. What’s the space complexity of this operation? It’s O(N). We will talk about the details in later section. This yields O(M * N) space complexity. Actually, for all the methods that reverse the list, they are at least O(N) space complexity so there’s no room to improve the space complexity either. The next way to improve this algorithm is to think about the syntax simplicity. There’s a pythonic answer: 123class Solution: def flipAndInvertImage(self, A: List[List[int]]) -&gt; List[List[int]]: return [[1 - i for i in row[::-1]] for row in A] Answer AnalysisThe improved algorithm doesn’t help with improving the time and space complexities. Time complexity: O(M * N) where M x N is the dimension of the input matrix. Space complexity: O(M * N) where M x N is the dimension of the input matrix. Takeaways Reverse a list As we have talked earlier, there are couple of different ways to reverse a list. We will talk about them one by one. Using built-in reversed() function Python3 has reversed() as a built-in function which takes a seq as input. According to Python’s official documentation: seq must be an object which has a reversed() method or supports the sequence protocol (the len() method and the getitem() method with integer arguments starting at 0). One thing to notice is that reversed() return an iterator. To make the iterator a list, you have co explicitly cast it. For example: 123456&gt;&gt;&gt; a &#x3D; [1, 2, 3]&gt;&gt;&gt; b &#x3D; reversed(a)&gt;&gt;&gt; b&lt;list_reverseiterator object at 0x1090762e8&gt;&gt;&gt;&gt; list(b)[3, 2, 1] It has O(N) time and space complexity. Using List class method reverse()List class contains a class method called reverse() which modifies the object in-place to reverse it. Even though the list is modified in-place, it still requires O(N) time complexity because it requires additional extra memory during the reverse. Example: 1234&gt;&gt;&gt; a &#x3D; [1, 2, 3]&gt;&gt;&gt; a.reverse()&gt;&gt;&gt; a[3, 2, 1] It has O(N) time and space complexity. Using list sliceList can also be reversed using slicing syntax such as a[::-1]. This doesn’t modify the original list so you have to assign it to another variable. For example: 123456&gt;&gt;&gt; a &#x3D; [1, 2, 3]&gt;&gt;&gt; b &#x3D; a[::-1]&gt;&gt;&gt; b[3, 2, 1]&gt;&gt;&gt; a[1, 2, 3] It has O(N) time and space complexity. List comprehension I used list comprehension in the improved algorithm. List comprehension is a really useful and clean syntax to construct a list. For more details, please refer to this official python documentation.","categories":[{"name":"Array","slug":"Array","permalink":"https://latteotw.github.io/categories/Array/"}],"tags":[{"name":"Array","slug":"Array","permalink":"https://latteotw.github.io/tags/Array/"},{"name":"Easy","slug":"Easy","permalink":"https://latteotw.github.io/tags/Easy/"},{"name":"Python-List","slug":"Python-List","permalink":"https://latteotw.github.io/tags/Python-List/"}]},{"title":"Python built-in functions","slug":"Python-built-in-functions","date":"2020-02-06T19:31:13.000Z","updated":"2020-02-07T23:47:49.642Z","comments":true,"path":"2020/02/06/Python-built-in-functions/","link":"","permalink":"https://latteotw.github.io/2020/02/06/Python-built-in-functions/","excerpt":"Range From Python official document: class range(stop) class range(start, stop[, step]) Rather than being a function, range is actually an immutable sequence type, as documented in Ranges and Sequence Types &gt;— list, tuple, range. Range is a little bit different than all other built-in functions. It’s essential a data type that’s built-in in Python. More specifically, it shares the same feature of list and tuple - it’s sequential. Let’s introduce some features and usage of range. Start is inclusive and stop is exclusive 12for i in range(1, 3, 1): print(i) This will print: 1212","text":"Range From Python official document: class range(stop) class range(start, stop[, step]) Rather than being a function, range is actually an immutable sequence type, as documented in Ranges and Sequence Types &gt;— list, tuple, range. Range is a little bit different than all other built-in functions. It’s essential a data type that’s built-in in Python. More specifically, it shares the same feature of list and tuple - it’s sequential. Let’s introduce some features and usage of range. Start is inclusive and stop is exclusive 12for i in range(1, 3, 1): print(i) This will print: 1212 You can ignore step parameter. When step is ignored, it defaults to 1 12for i in range(1, 3): print(i) This will print the same as above You can ignore both start and step. When start is ignored, it defaults to 0 12for i in range(3): print(i) This will print: 123012 There are more advanced usage of range is discussed at this post. reversed() Python3 has reversed() as a built-in function which takes a seq as input. According to Python’s official documentation seq must be an object which has a reversed() method or supports the sequence protocol (the len() method and the getitem() method with integer arguments starting at 0). One thing to notice is that reversed() return an iterator. To make the iterator a list, you have co explicitly cast it. For example: 123456&gt;&gt;&gt; a &#x3D; [1, 2, 3]&gt;&gt;&gt; b &#x3D; reversed(a)&gt;&gt;&gt; b&lt;list_reverseiterator object at 0x1090762e8&gt;&gt;&gt;&gt; list(b)[3, 2, 1] It has O(N) time and space complexity.","categories":[{"name":"Python","slug":"Python","permalink":"https://latteotw.github.io/categories/Python/"}],"tags":[{"name":"Python-Built-In-Functions","slug":"Python-Built-In-Functions","permalink":"https://latteotw.github.io/tags/Python-Built-In-Functions/"}]},{"title":"1299. Replace Elements with Greatest Element on Right Side ","slug":"1299-Replace-Elements-with-Greatest-Element-on-Right-Side","date":"2020-02-06T00:11:31.000Z","updated":"2020-02-06T00:46:17.079Z","comments":true,"path":"2020/02/05/1299-Replace-Elements-with-Greatest-Element-on-Right-Side/","link":"","permalink":"https://latteotw.github.io/2020/02/05/1299-Replace-Elements-with-Greatest-Element-on-Right-Side/","excerpt":"https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/ Problem Statement Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1. After doing so, return the array. Example 1: Input: arr = [17,18,5,4,6,1] Output: [18,6,6,6,1,-1] Problem AnalysisOur input for this problem is an array and we are required to replace every element in the array with another number. This means that we have to iterate through the array for at least once. This yields at least O(N) time complexity. We also noticed that the last element is always -1. What we have to return is the modified array or a new array. This means that if we can modify the array in-place, we could reach a O(1) space complexity. Thinking ProcessThe very intuitive solution is to start from the first element in the array and move to the right one by one. At each element, we find the maximum number on the right. However, it’s easy to get the time complexity of this algorithm which will be O(N^2). This is way too slow. The question to ask is why do we have to iterate through each element on the right of the current index? Because we have to find the current maximum on the right every time we move the index. Is there anyway for us to find the current maximum on the right without iterating through the sub-array to the right of the index? Yes, we can start from the last element of the array. Every time we move the index to the left by one, we have already known what’s the maximum from the right-most point to the current index. This easily yields the following O(N) answer: First Solution1234567class Solution: def replaceElements(self, arr: List[int]) -&gt; List[int]: cur_max = -1 # We keep track of what's the current maximum number from the right-most point. # cur_max is initialized to -1 because the last element is -1. for i in range(len(arr)-1, -1, -1): arr[i], cur_max = cur_max, max(cur_max, arr[i]) return arr","text":"https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/ Problem Statement Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1. After doing so, return the array. Example 1: Input: arr = [17,18,5,4,6,1] Output: [18,6,6,6,1,-1] Problem AnalysisOur input for this problem is an array and we are required to replace every element in the array with another number. This means that we have to iterate through the array for at least once. This yields at least O(N) time complexity. We also noticed that the last element is always -1. What we have to return is the modified array or a new array. This means that if we can modify the array in-place, we could reach a O(1) space complexity. Thinking ProcessThe very intuitive solution is to start from the first element in the array and move to the right one by one. At each element, we find the maximum number on the right. However, it’s easy to get the time complexity of this algorithm which will be O(N^2). This is way too slow. The question to ask is why do we have to iterate through each element on the right of the current index? Because we have to find the current maximum on the right every time we move the index. Is there anyway for us to find the current maximum on the right without iterating through the sub-array to the right of the index? Yes, we can start from the last element of the array. Every time we move the index to the left by one, we have already known what’s the maximum from the right-most point to the current index. This easily yields the following O(N) answer: First Solution1234567class Solution: def replaceElements(self, arr: List[int]) -&gt; List[int]: cur_max = -1 # We keep track of what's the current maximum number from the right-most point. # cur_max is initialized to -1 because the last element is -1. for i in range(len(arr)-1, -1, -1): arr[i], cur_max = cur_max, max(cur_max, arr[i]) return arr ImprovementsThere’s not much improvements to talk about because I think we have already reached the best time complexity and the best space complexity. Answer AnalysisThe improved algorithm doesn’t help with improving the time and space complexities. Time complexity: O(N) Space complexity: O(1) since we modified the input array in-place. Takeaways Swap operation In most of other programming language, when you have to swap two elements, you have to do something like: 12345a = 1b = 2temp = aa = bb = temp This means that we usually need to find a temporary place holder for one of the elements that need to be swapped. Just think about the case when you have to swap the liquid in two glass bottles. How would you do it? With python, there’s a syntax sugar where you can do something like: 123a = 1b = 2a, b = b, a Every element of the left side of = are assigned with their corresponding value on the right side of = Usage of range() range() is a built-in function of python. The formal Python3 documentation has two prototypes for the built-in range function: class range(stop) class range(start, stop[, step]) Without specifying the step, the default step size is 1. Let’s see the following examples: 12for i in range(3): print(i) This will print: 123012 12for i in range(5, 1, -2): print(i) This will print 1253 There are couple things to notice: The range is left inclusive and right exclusive. If you don’t specify the start, it will always start from 0 If you don’t specify the step, it will always default to 1","categories":[{"name":"Array","slug":"Array","permalink":"https://latteotw.github.io/categories/Array/"}],"tags":[{"name":"Array","slug":"Array","permalink":"https://latteotw.github.io/tags/Array/"},{"name":"Easy","slug":"Easy","permalink":"https://latteotw.github.io/tags/Easy/"},{"name":"Python-List","slug":"Python-List","permalink":"https://latteotw.github.io/tags/Python-List/"}]},{"title":"Python List","slug":"Python-List","date":"2020-02-04T23:47:42.000Z","updated":"2020-02-06T19:32:35.440Z","comments":true,"path":"2020/02/04/Python-List/","link":"","permalink":"https://latteotw.github.io/2020/02/04/Python-List/","excerpt":"List Concatenation There are two ways two concatenate a list with another. One is to use + to concatenate a list. Another way is to use extend() function to concatenate 123456789# Use + to concatenation a listA = ['a', 'p', 'p', 'l', 'e']B = ['b', 'a', 'n', 'a', 'n', 'a']C = A + Bprint(C) # ['a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a']# Use extend() function to concatenateA.extend(B)print(A) # ['a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a']","text":"List Concatenation There are two ways two concatenate a list with another. One is to use + to concatenate a list. Another way is to use extend() function to concatenate 123456789# Use + to concatenation a listA = ['a', 'p', 'p', 'l', 'e']B = ['b', 'a', 'n', 'a', 'n', 'a']C = A + Bprint(C) # ['a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a']# Use extend() function to concatenateA.extend(B)print(A) # ['a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a'] We can easily note that + creates a new list C which is the result of A + B At the meanwhile, extend concatenate list B to original list of A. This means that no new list is created. It modifies list A in-place. This operation will usually save some space but we lost the track of A unless you copy the original elements of A into another list ahead of time. For how to copy a list, please see next section. List Copy To continue with the previous example, we can copy the list before we extend it so that we don’t lose the track of the original list if we want. Before we go into the actual syntax, let’s see the following example: 12345A = ['a', 'p', 'p', 'l', 'e']B = ['b', 'a', 'n', 'a', 'n', 'a']C = AD = A.copy()A.extend(B) In this case, what is the result of print(C)? Also, What’s the result of print(D)? 123456&gt;&gt;&gt; print(A)[&#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39;, &#39;b&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;]&gt;&gt;&gt; print(C)[&#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39;, &#39;b&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;]&gt;&gt;&gt; print(D)[&#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39;] Why? Let’s see some more results first: 12345678910&gt;&gt;&gt; print(A.__str__)&lt;method-wrapper &#39;__str__&#39; of list object at 0x103aa2588&gt;&gt;&gt;&gt; print(C.__str__)&lt;method-wrapper &#39;__str__&#39; of list object at 0x103aa2588&gt;&gt;&gt;&gt; print(D.__str__)&lt;method-wrapper &#39;__str__&#39; of list object at 0x103aa2688&gt;&gt;&gt;&gt; A &#x3D;&#x3D; DFalse&gt;&gt;&gt; A &#x3D;&#x3D; CTrue What does this mean? print(A.__str__) function prints out the object description of A. 0x103aa2588 is the object address in memory. Here we can see that A and C has the same address in memory and D has a different address in memory. A == C equals true and A == D equals false also verify this statement. In order to know why we got this behavior, we have to look at how C and D is initialized. We had C = A and D = A.copy(). The difference then became obvious: Statement like C = A did a shallow copy which copy the object of A to variable C so that A and C refer to the same address in memory. At the same time, D = A.copy() actually creates a new array D and we copied the actual item in A to D instead of simply refers the object of A to D. It more or less similar to the following process: 12D = []for item in A: D.append(item)","categories":[{"name":"Python","slug":"Python","permalink":"https://latteotw.github.io/categories/Python/"}],"tags":[{"name":"Python-List","slug":"Python-List","permalink":"https://latteotw.github.io/tags/Python-List/"}]},{"title":"1304. Find N Unique Integers Sum up to Zero","slug":"1304-Find-N-Unique-Integers-Sum-up-to-Zero","date":"2020-02-04T02:20:48.000Z","updated":"2020-02-05T00:22:40.488Z","comments":true,"path":"2020/02/03/1304-Find-N-Unique-Integers-Sum-up-to-Zero/","link":"","permalink":"https://latteotw.github.io/2020/02/03/1304-Find-N-Unique-Integers-Sum-up-to-Zero/","excerpt":"https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/ Problem Statement Given an integer n, return any array containing n unique integers such that they add up to 0. Problem AnalysisWe firstly note that the input is an integer n and output is an array. Furthermore, we find that the output is not unique, which means that we have to construct an output that meet the requirement of the problem and there could be multiple or even infinite number of correct answers to this problem. This is rarely seen in a coding interview. Another important thing that we notice from the question statement is that elements we use in the answer must be unique, which means we cannot reuse any of the element. Thinking ProcessFirstly we noticed that we need to construct an array that sums to 0. It’s really natural to think about the following way of constructing the array: [-n, -n-1, -n-2, …, -3, -2, -1, 0, 1, 2, 3, …, n-2, n-1, n] Since we need n elements in the array, which means we need n/2 elements on the positive side and n/2 on the negative side so that they can easily sum up to zero. The dealbreaker here is whether we need to include 0 in the array. On which circumstances do we need to include 0? When n is odd. Otherwise we don’t need 0. With this thinking process, it’s very easy to come up with the following naive solution: First Solution1234567class Solution: def sumZero(self, n: int) -&gt; List[int]: answer = [] # We construct an empty array to hold the result for i in range(1, (n//2) + 1): answer.extend([i, -i]) if n % 2 != 0: answer.append(0) # We add 0 when n is odd return answer","text":"https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/ Problem Statement Given an integer n, return any array containing n unique integers such that they add up to 0. Problem AnalysisWe firstly note that the input is an integer n and output is an array. Furthermore, we find that the output is not unique, which means that we have to construct an output that meet the requirement of the problem and there could be multiple or even infinite number of correct answers to this problem. This is rarely seen in a coding interview. Another important thing that we notice from the question statement is that elements we use in the answer must be unique, which means we cannot reuse any of the element. Thinking ProcessFirstly we noticed that we need to construct an array that sums to 0. It’s really natural to think about the following way of constructing the array: [-n, -n-1, -n-2, …, -3, -2, -1, 0, 1, 2, 3, …, n-2, n-1, n] Since we need n elements in the array, which means we need n/2 elements on the positive side and n/2 on the negative side so that they can easily sum up to zero. The dealbreaker here is whether we need to include 0 in the array. On which circumstances do we need to include 0? When n is odd. Otherwise we don’t need 0. With this thinking process, it’s very easy to come up with the following naive solution: First Solution1234567class Solution: def sumZero(self, n: int) -&gt; List[int]: answer = [] # We construct an empty array to hold the result for i in range(1, (n//2) + 1): answer.extend([i, -i]) if n % 2 != 0: answer.append(0) # We add 0 when n is odd return answer ImprovementsLet’s analyze the time complexity and space complexity of our first algorithm. Time complexity: O(N) because we need to iterate the loop for n/2 times. Space complexity: O(N) because our answer array has exactly n elements. We won’t be able to simplify the space complexity for sure because we anyway need to return an array with size n. Also, I don’t think there are easy ways to improve the time complexity as well because how many elements need to be constructed is depend on the input integer n and we have already reached a linear algorithm. So my focus will be at improving the code itself. What’s the ugly part in our code? I guess the first thing I want to get rid of is the if statement. How can we get rid of it? Let’s do some observations of the following constructions: n = 1, [0]n = 2, [-1, 1]n = 3, [-2, 0, 2]n = 4, [-3, -1, 1, 3]n = 5, [-4, -2, 0, 2, 4] What’s rule can we derive from it? The i-th element of the returning array = i * 2 - n + 1 Now with the derived rule, we can get the following improved algorithms: 123456class Solution: def sumZero(self, n: int) -&gt; List[int]: answer = [] for i in range(n): answer.append(i * 2 - n + 1) return answer To be more Pythonic: 123class Solution: def sumZero(self, n: int) -&gt; List[int]: return [i * 2 - n + 1 for i in range(n)] Answer AnalysisThe improved algorithm doesn’t help with improving the time and space complexities. Time complexity: O(N) Space complexity: O(N) TakeawaysThe main take aways for this problem will be about python. Different ways to concatenate two lists 123456789a = [1, 2, 3]b = [4, 5, 6]# Method 1: using +print(a + b) # [1, 2, 3, 4, 5, 6]# Method 2: using extenda.extend(b)print(a) # [1, 2, 3, 4, 5, 6] The difference between using + and extend is that + will create a new list while extend modifies the first list in-place. Extend will save some space for most use cases. Python list comprehension Please refer to this awesome post for how to use python list comprehension // and / for division operations Depend on which version of python you use, // and / works differently 12345678# python33 // 2 # = 13 / 2 # = 1.5# python23 // 2 # = 13 / 2 # = 13 / 2.0 # = 1.5","categories":[{"name":"Array","slug":"Array","permalink":"https://latteotw.github.io/categories/Array/"}],"tags":[{"name":"Array","slug":"Array","permalink":"https://latteotw.github.io/tags/Array/"},{"name":"Easy","slug":"Easy","permalink":"https://latteotw.github.io/tags/Easy/"},{"name":"Python-List","slug":"Python-List","permalink":"https://latteotw.github.io/tags/Python-List/"}]},{"title":"How to use this blog","slug":"How-to-use-this-blog","date":"2020-02-03T05:56:58.000Z","updated":"2020-02-04T02:27:53.156Z","comments":true,"path":"2020/02/02/How-to-use-this-blog/","link":"","permalink":"https://latteotw.github.io/2020/02/02/How-to-use-this-blog/","excerpt":"Depend on what you are planning to do, there are different ways to use this blog. Follow my path to prepare coding interviewStep 1Read About this blog tounderstand my purpose of building this blog Step 2Read Study plan to learn my planfor preparing coding interviews. Step 3Keep watching Knowledge structure graphas I will keep updating them as I proceed. Step 4Follow my new posts by tags or categories and practice on your own.","text":"Depend on what you are planning to do, there are different ways to use this blog. Follow my path to prepare coding interviewStep 1Read About this blog tounderstand my purpose of building this blog Step 2Read Study plan to learn my planfor preparing coding interviews. Step 3Keep watching Knowledge structure graphas I will keep updating them as I proceed. Step 4Follow my new posts by tags or categories and practice on your own. Search for answers of problemsUse the search box on top of the website to search the keyword or browse by category.","categories":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/categories/Misc/"},{"name":"General","slug":"Misc/General","permalink":"https://latteotw.github.io/categories/Misc/General/"}],"tags":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/tags/Misc/"}]},{"title":"Study plan","slug":"Study-plan","date":"2020-02-03T05:56:49.000Z","updated":"2020-02-03T23:38:20.728Z","comments":true,"path":"2020/02/02/Study-plan/","link":"","permalink":"https://latteotw.github.io/2020/02/02/Study-plan/","excerpt":"We will follow the following order when we practice with Leetcode Arrays Strings Hash table Stack Queue Linked list Tree Graph Math Bit manipulation Recursion Sort Heap Divide and conquer Binary Search BFS DFS Union find Dynamic programming Greedy Backtracking","text":"We will follow the following order when we practice with Leetcode Arrays Strings Hash table Stack Queue Linked list Tree Graph Math Bit manipulation Recursion Sort Heap Divide and conquer Binary Search BFS DFS Union find Dynamic programming Greedy Backtracking As you can see, we will try to focus on data structures first and then algorithmssince I personally think that data structure are the fundamental for learning moreadvanced algorithms as algorithms are implemented with basic data structures. However,you will find a lot intersections between data structure and algorithms. For example,in order to solve an array problem, you might have to use the knowledge of binarysearch. Therefore, I will try to not include questions that rely on knowledge abouttopics that we have not covered yet. However, I will keep a note on my end to makesure that we re-visit those problems after we cover the topics. After we visit everytopic, all the dots will be connected. There are some topics that I didn’t include in above list because they have less frequenciesthough they are equally important as those problems with higher frequencies. Forexample: Trie, Segment tree, Ordered map and etc. I will still cover these topicsat the time when I think I am ready. I will create a folder(category) and also tag for each of the topics. You can eitherbrowse by category, tag or simply search in the search box.","categories":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/categories/Misc/"},{"name":"General","slug":"Misc/General","permalink":"https://latteotw.github.io/categories/Misc/General/"}],"tags":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/tags/Misc/"}]},{"title":"Knowledge structure graph","slug":"Knowledge-structure-graph","date":"2020-02-03T05:33:39.000Z","updated":"2020-02-03T05:42:12.820Z","comments":true,"path":"2020/02/02/Knowledge-structure-graph/","link":"","permalink":"https://latteotw.github.io/2020/02/02/Knowledge-structure-graph/","excerpt":"","text":"","categories":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/categories/Misc/"},{"name":"General","slug":"Misc/General","permalink":"https://latteotw.github.io/categories/Misc/General/"}],"tags":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/tags/Misc/"}]},{"title":"About this blog","slug":"About-this-blog","date":"2020-01-30T08:46:45.000Z","updated":"2020-02-03T23:38:37.580Z","comments":true,"path":"2020/01/30/About-this-blog/","link":"","permalink":"https://latteotw.github.io/2020/01/30/About-this-blog/","excerpt":"PurposeI started writing this blog as a memo for my coding interview preparation process.At the mean while, I hope readers can find useful contents in this blog, eitheryou are preparing for coding interview the same as me, or just hoping to sharp yourdata structures and algorithms.","text":"PurposeI started writing this blog as a memo for my coding interview preparation process.At the mean while, I hope readers can find useful contents in this blog, eitheryou are preparing for coding interview the same as me, or just hoping to sharp yourdata structures and algorithms. Approaches I will use Leetcode as my main source of coding questions and answering templates. I will try to complete selected questions by tags in Leetcode. For each question,they will be approached in a various aspects: Problem set Problem set analysis Thinking process Brutal force / First solution Improvements Answer analysis: time/space complexities Take aways: conclusions, templates, programming related takeaways such as theusage of a given data structure. I will draw a knowledge graph that can represent the structure of all theproblems and their underlying data structure and algorithms that we have processedso that readers can get a general idea of the big picture of data structures and algorithms.Pre-requisites Basic knowledge of Python. We will use Python3 and I will also try to cover somebasic programming knowledge about Python Leetcode access. You can register it for free. Basic knowledge of data structures like array, strings, hashmap and etc. I won’tassume any advanced knowledge of complicated data structure such as tree and graph.Knowledge of algorithms are not required as learning them together is the main purposeof this blog. DiscussionAs I will try my best effort to make my post as accurate as possible, I would alsoappreciate your feedback for any questions and improvements. You can use the discussionsection under each question to interact with me and other readers. Q&amp;A When will I update the blog? I will try to update it on a daily basis but there will for sure be gaps. What’s your practicing order for Leetcode tags? I will post another follow up blog to talk about my plans for practicing withLeetcode. Will system designs be discussed? Yes but it will come after the data structure and algorithms. - latteotw - Nobody said it was easy. No one ever said it would be this hard.","categories":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/categories/Misc/"},{"name":"General","slug":"Misc/General","permalink":"https://latteotw.github.io/categories/Misc/General/"}],"tags":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/tags/Misc/"}]}]}