{"meta":{"title":"LATTEOTW","subtitle":"","description":"","author":"latteotw","url":"https://latteotw.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-01-31T03:48:08.829Z","updated":"2020-01-31T03:48:08.829Z","comments":true,"path":"404.html","permalink":"https://latteotw.github.io/404.html","excerpt":"","text":"404 Not Found Sorry the page your are looking for is gone Please make sure you entered the right address"},{"title":"About","date":"2020-01-30T08:41:27.990Z","updated":"2020-01-30T08:41:27.990Z","comments":true,"path":"about/index.html","permalink":"https://latteotw.github.io/about/index.html","excerpt":"","text":"This is all about me"},{"title":"All categories","date":"2020-01-30T08:54:32.875Z","updated":"2020-01-30T08:54:32.875Z","comments":true,"path":"categories/index.html","permalink":"https://latteotw.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-01-30T08:43:15.335Z","updated":"2020-01-30T08:43:15.335Z","comments":true,"path":"tags/index.html","permalink":"https://latteotw.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Python List","slug":"Python-List","date":"2020-02-04T23:47:42.000Z","updated":"2020-02-05T00:26:21.612Z","comments":true,"path":"2020/02/04/Python-List/","link":"","permalink":"https://latteotw.github.io/2020/02/04/Python-List/","excerpt":"List Concatenation There are two ways two concatenate a list with another. One is to use + to concatenate a list. Another way is to use extend() function to concatenate 123456789# Use + to concatenation a listA = ['a', 'p', 'p', 'l', 'e']B = ['b', 'a', 'n', 'a', 'n', 'a']C = A + Bprint(C) # ['a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a']# Use extend() function to concatenateA.extend(B)print(A) # ['a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a']","text":"List Concatenation There are two ways two concatenate a list with another. One is to use + to concatenate a list. Another way is to use extend() function to concatenate 123456789# Use + to concatenation a listA = ['a', 'p', 'p', 'l', 'e']B = ['b', 'a', 'n', 'a', 'n', 'a']C = A + Bprint(C) # ['a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a']# Use extend() function to concatenateA.extend(B)print(A) # ['a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a'] We can easily note that + creates a new list C which is the result of A + B At the meanwhile, extend concatenate list B to original list of A. This means that no new list is created. It modifies list A in-place. This operation will usually save some space but we lost the track of A unless you copy the original elements of A into another list ahead of time. For how to copy a list, please see next section. List Copy To continue with the previous example, we can copy the list before we extend it so that we don’t lose the track of the original list if we want. Before we go into the actual syntax, let’s see the following example: 12345A = ['a', 'p', 'p', 'l', 'e']B = ['b', 'a', 'n', 'a', 'n', 'a']C = AD = A.copy()A.extend(B) In this case, what is the result of print(C)? Also, What’s the result of print(D)? 123456&gt;&gt;&gt; print(A)[&#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39;, &#39;b&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;]&gt;&gt;&gt; print(C)[&#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39;, &#39;b&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;]&gt;&gt;&gt; print(D)[&#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39;] Why? Let’s see some more results first: 12345678910&gt;&gt;&gt; print(A.__str__)&lt;method-wrapper &#39;__str__&#39; of list object at 0x103aa2588&gt;&gt;&gt;&gt; print(C.__str__)&lt;method-wrapper &#39;__str__&#39; of list object at 0x103aa2588&gt;&gt;&gt;&gt; print(D.__str__)&lt;method-wrapper &#39;__str__&#39; of list object at 0x103aa2688&gt;&gt;&gt;&gt; A &#x3D;&#x3D; DFalse&gt;&gt;&gt; A &#x3D;&#x3D; CTrue What does this mean? print(A.__str__) function prints out the object description of A. 0x103aa2588 is the object address in memory. Here we can see that A and C has the same address in memory and D has a different address in memory. A == C equals true and A == D equals false also verify this statement. In order to know why we got this behavior, we have to look at how C and D is initialized. We had C = A and D = A.copy(). The difference then became obvious: Statement like C = A did a shallow copy which copy the object of A to variable C so that A and C refer to the same address in memory. At the same time, D = A.copy() actually creates a new array D and we copied the actual item in A to D instead of simply refers the object of A to D. It more or less similar to the following process: 12D = []for item in A: D.append(item)","categories":[{"name":"Python","slug":"Python","permalink":"https://latteotw.github.io/categories/Python/"},{"name":"List","slug":"Python/List","permalink":"https://latteotw.github.io/categories/Python/List/"}],"tags":[{"name":"Python-List","slug":"Python-List","permalink":"https://latteotw.github.io/tags/Python-List/"}]},{"title":"1304. Find N Unique Integers Sum up to Zero","slug":"1304-Find-N-Unique-Integers-Sum-up-to-Zero","date":"2020-02-04T02:20:48.000Z","updated":"2020-02-05T00:22:40.488Z","comments":true,"path":"2020/02/03/1304-Find-N-Unique-Integers-Sum-up-to-Zero/","link":"","permalink":"https://latteotw.github.io/2020/02/03/1304-Find-N-Unique-Integers-Sum-up-to-Zero/","excerpt":"https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/ Problem Statement Given an integer n, return any array containing n unique integers such that they add up to 0. Problem AnalysisWe firstly note that the input is an integer n and output is an array. Furthermore, we find that the output is not unique, which means that we have to construct an output that meet the requirement of the problem and there could be multiple or even infinite number of correct answers to this problem. This is rarely seen in a coding interview. Another important thing that we notice from the question statement is that elements we use in the answer must be unique, which means we cannot reuse any of the element. Thinking ProcessFirstly we noticed that we need to construct an array that sums to 0. It’s really natural to think about the following way of constructing the array: [-n, -n-1, -n-2, …, -3, -2, -1, 0, 1, 2, 3, …, n-2, n-1, n] Since we need n elements in the array, which means we need n/2 elements on the positive side and n/2 on the negative side so that they can easily sum up to zero. The dealbreaker here is whether we need to include 0 in the array. On which circumstances do we need to include 0? When n is odd. Otherwise we don’t need 0. With this thinking process, it’s very easy to come up with the following naive solution: First Solution1234567class Solution: def sumZero(self, n: int) -&gt; List[int]: answer = [] # We construct an empty array to hold the result for i in range(1, (n//2) + 1): answer.extend([i, -i]) if n % 2 != 0: answer.append(0) # We add 0 when n is odd return answer","text":"https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/ Problem Statement Given an integer n, return any array containing n unique integers such that they add up to 0. Problem AnalysisWe firstly note that the input is an integer n and output is an array. Furthermore, we find that the output is not unique, which means that we have to construct an output that meet the requirement of the problem and there could be multiple or even infinite number of correct answers to this problem. This is rarely seen in a coding interview. Another important thing that we notice from the question statement is that elements we use in the answer must be unique, which means we cannot reuse any of the element. Thinking ProcessFirstly we noticed that we need to construct an array that sums to 0. It’s really natural to think about the following way of constructing the array: [-n, -n-1, -n-2, …, -3, -2, -1, 0, 1, 2, 3, …, n-2, n-1, n] Since we need n elements in the array, which means we need n/2 elements on the positive side and n/2 on the negative side so that they can easily sum up to zero. The dealbreaker here is whether we need to include 0 in the array. On which circumstances do we need to include 0? When n is odd. Otherwise we don’t need 0. With this thinking process, it’s very easy to come up with the following naive solution: First Solution1234567class Solution: def sumZero(self, n: int) -&gt; List[int]: answer = [] # We construct an empty array to hold the result for i in range(1, (n//2) + 1): answer.extend([i, -i]) if n % 2 != 0: answer.append(0) # We add 0 when n is odd return answer ImprovementsLet’s analyze the time complexity and space complexity of our first algorithm. Time complexity: O(N) because we need to iterate the loop for n/2 times. Space complexity: O(N) because our answer array has exactly n elements. We won’t be able to simplify the space complexity for sure because we anyway need to return an array with size n. Also, I don’t think there are easy ways to improve the time complexity as well because how many elements need to be constructed is depend on the input integer n and we have already reached a linear algorithm. So my focus will be at improving the code itself. What’s the ugly part in our code? I guess the first thing I want to get rid of is the if statement. How can we get rid of it? Let’s do some observations of the following constructions: n = 1, [0]n = 2, [-1, 1]n = 3, [-2, 0, 2]n = 4, [-3, -1, 1, 3]n = 5, [-4, -2, 0, 2, 4] What’s rule can we derive from it? The i-th element of the returning array = i * 2 - n + 1 Now with the derived rule, we can get the following improved algorithms: 123456class Solution: def sumZero(self, n: int) -&gt; List[int]: answer = [] for i in range(n): answer.append(i * 2 - n + 1) return answer To be more Pythonic: 123class Solution: def sumZero(self, n: int) -&gt; List[int]: return [i * 2 - n + 1 for i in range(n)] Answer AnalysisThe improved algorithm doesn’t help with improving the time and space complexities. Time complexity: O(N) Space complexity: O(N) TakeawaysThe main take aways for this problem will be about python. Different ways to concatenate two lists 123456789a = [1, 2, 3]b = [4, 5, 6]# Method 1: using +print(a + b) # [1, 2, 3, 4, 5, 6]# Method 2: using extenda.extend(b)print(a) # [1, 2, 3, 4, 5, 6] The difference between using + and extend is that + will create a new list while extend modifies the first list in-place. Extend will save some space for most use cases. Python list comprehension Please refer to this awesome post for how to use python list comprehension // and / for division operations Depend on which version of python you use, // and / works differently 12345678# python33 // 2 # = 13 / 2 # = 1.5# python23 // 2 # = 13 / 2 # = 13 / 2.0 # = 1.5","categories":[{"name":"Array","slug":"Array","permalink":"https://latteotw.github.io/categories/Array/"}],"tags":[{"name":"Array","slug":"Array","permalink":"https://latteotw.github.io/tags/Array/"},{"name":"Easy","slug":"Easy","permalink":"https://latteotw.github.io/tags/Easy/"},{"name":"Python-List","slug":"Python-List","permalink":"https://latteotw.github.io/tags/Python-List/"}]},{"title":"How to use this blog","slug":"How-to-use-this-blog","date":"2020-02-03T05:56:58.000Z","updated":"2020-02-04T02:27:53.156Z","comments":true,"path":"2020/02/02/How-to-use-this-blog/","link":"","permalink":"https://latteotw.github.io/2020/02/02/How-to-use-this-blog/","excerpt":"Depend on what you are planning to do, there are different ways to use this blog. Follow my path to prepare coding interviewStep 1Read About this blog tounderstand my purpose of building this blog Step 2Read Study plan to learn my planfor preparing coding interviews. Step 3Keep watching Knowledge structure graphas I will keep updating them as I proceed. Step 4Follow my new posts by tags or categories and practice on your own.","text":"Depend on what you are planning to do, there are different ways to use this blog. Follow my path to prepare coding interviewStep 1Read About this blog tounderstand my purpose of building this blog Step 2Read Study plan to learn my planfor preparing coding interviews. Step 3Keep watching Knowledge structure graphas I will keep updating them as I proceed. Step 4Follow my new posts by tags or categories and practice on your own. Search for answers of problemsUse the search box on top of the website to search the keyword or browse by category.","categories":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/categories/Misc/"},{"name":"General","slug":"Misc/General","permalink":"https://latteotw.github.io/categories/Misc/General/"}],"tags":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/tags/Misc/"}]},{"title":"Study plan","slug":"Study-plan","date":"2020-02-03T05:56:49.000Z","updated":"2020-02-03T23:38:20.728Z","comments":true,"path":"2020/02/02/Study-plan/","link":"","permalink":"https://latteotw.github.io/2020/02/02/Study-plan/","excerpt":"We will follow the following order when we practice with Leetcode Arrays Strings Hash table Stack Queue Linked list Tree Graph Math Bit manipulation Recursion Sort Heap Divide and conquer Binary Search BFS DFS Union find Dynamic programming Greedy Backtracking","text":"We will follow the following order when we practice with Leetcode Arrays Strings Hash table Stack Queue Linked list Tree Graph Math Bit manipulation Recursion Sort Heap Divide and conquer Binary Search BFS DFS Union find Dynamic programming Greedy Backtracking As you can see, we will try to focus on data structures first and then algorithmssince I personally think that data structure are the fundamental for learning moreadvanced algorithms as algorithms are implemented with basic data structures. However,you will find a lot intersections between data structure and algorithms. For example,in order to solve an array problem, you might have to use the knowledge of binarysearch. Therefore, I will try to not include questions that rely on knowledge abouttopics that we have not covered yet. However, I will keep a note on my end to makesure that we re-visit those problems after we cover the topics. After we visit everytopic, all the dots will be connected. There are some topics that I didn’t include in above list because they have less frequenciesthough they are equally important as those problems with higher frequencies. Forexample: Trie, Segment tree, Ordered map and etc. I will still cover these topicsat the time when I think I am ready. I will create a folder(category) and also tag for each of the topics. You can eitherbrowse by category, tag or simply search in the search box.","categories":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/categories/Misc/"},{"name":"General","slug":"Misc/General","permalink":"https://latteotw.github.io/categories/Misc/General/"}],"tags":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/tags/Misc/"}]},{"title":"Knowledge structure graph","slug":"Knowledge-structure-graph","date":"2020-02-03T05:33:39.000Z","updated":"2020-02-03T05:42:12.820Z","comments":true,"path":"2020/02/02/Knowledge-structure-graph/","link":"","permalink":"https://latteotw.github.io/2020/02/02/Knowledge-structure-graph/","excerpt":"","text":"","categories":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/categories/Misc/"},{"name":"General","slug":"Misc/General","permalink":"https://latteotw.github.io/categories/Misc/General/"}],"tags":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/tags/Misc/"}]},{"title":"About this blog","slug":"About-this-blog","date":"2020-01-30T08:46:45.000Z","updated":"2020-02-03T23:38:37.580Z","comments":true,"path":"2020/01/30/About-this-blog/","link":"","permalink":"https://latteotw.github.io/2020/01/30/About-this-blog/","excerpt":"PurposeI started writing this blog as a memo for my coding interview preparation process.At the mean while, I hope readers can find useful contents in this blog, eitheryou are preparing for coding interview the same as me, or just hoping to sharp yourdata structures and algorithms.","text":"PurposeI started writing this blog as a memo for my coding interview preparation process.At the mean while, I hope readers can find useful contents in this blog, eitheryou are preparing for coding interview the same as me, or just hoping to sharp yourdata structures and algorithms. Approaches I will use Leetcode as my main source of coding questions and answering templates. I will try to complete selected questions by tags in Leetcode. For each question,they will be approached in a various aspects: Problem set Problem set analysis Thinking process Brutal force / First solution Improvements Answer analysis: time/space complexities Take aways: conclusions, templates, programming related takeaways such as theusage of a given data structure. I will draw a knowledge graph that can represent the structure of all theproblems and their underlying data structure and algorithms that we have processedso that readers can get a general idea of the big picture of data structures and algorithms.Pre-requisites Basic knowledge of Python. We will use Python3 and I will also try to cover somebasic programming knowledge about Python Leetcode access. You can register it for free. Basic knowledge of data structures like array, strings, hashmap and etc. I won’tassume any advanced knowledge of complicated data structure such as tree and graph.Knowledge of algorithms are not required as learning them together is the main purposeof this blog. DiscussionAs I will try my best effort to make my post as accurate as possible, I would alsoappreciate your feedback for any questions and improvements. You can use the discussionsection under each question to interact with me and other readers. Q&amp;A When will I update the blog? I will try to update it on a daily basis but there will for sure be gaps. What’s your practicing order for Leetcode tags? I will post another follow up blog to talk about my plans for practicing withLeetcode. Will system designs be discussed? Yes but it will come after the data structure and algorithms. - latteotw - Nobody said it was easy. No one ever said it would be this hard.","categories":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/categories/Misc/"},{"name":"General","slug":"Misc/General","permalink":"https://latteotw.github.io/categories/Misc/General/"}],"tags":[{"name":"Misc","slug":"Misc","permalink":"https://latteotw.github.io/tags/Misc/"}]}]}